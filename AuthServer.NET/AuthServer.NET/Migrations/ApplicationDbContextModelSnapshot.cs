// <auto-generated />
using System;
using AuthServer.NET.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AuthServer.NET.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("AuthServer.NET.Models.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("935fa90c-b06a-4bb3-b9e8-8c2ddddcda78"),
                            Active = true,
                            TimeStamp = new DateTime(2021, 1, 10, 12, 16, 31, 586, DateTimeKind.Utc).AddTicks(4703)
                        });
                });

            modelBuilder.Entity("AuthServer.NET.Models.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IssureRefreshTokens")
                        .HasColumnType("bit");

                    b.Property<int>("RefreshTokenExpirationMin")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("client_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("client_secret")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Clients");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Client");
                });

            modelBuilder.Entity("AuthServer.NET.Models.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AuthServer.NET.Models.Entities.ClientAuthCode", b =>
                {
                    b.HasBaseType("AuthServer.NET.Models.Entities.Client");

                    b.ToTable("Clients");

                    b.HasDiscriminator().HasValue("ClientAuthCode");
                });

            modelBuilder.Entity("AuthServer.NET.Models.Entities.ClientClientCredentials", b =>
                {
                    b.HasBaseType("AuthServer.NET.Models.Entities.Client");

                    b.ToTable("Clients");

                    b.HasDiscriminator().HasValue("ClientClientCredentials");
                });

            modelBuilder.Entity("AuthServer.NET.Models.Entities.ClientImplicit", b =>
                {
                    b.HasBaseType("AuthServer.NET.Models.Entities.Client");

                    b.ToTable("Clients");

                    b.HasDiscriminator().HasValue("ClientImplicit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8fe3326b-f3e9-4b81-823c-3796c9aa4e40"),
                            Active = true,
                            ApplicationUserId = new Guid("935fa90c-b06a-4bb3-b9e8-8c2ddddcda78"),
                            IssureRefreshTokens = true,
                            RefreshTokenExpirationMin = 15,
                            TimeStamp = new DateTime(2021, 1, 10, 12, 16, 31, 587, DateTimeKind.Utc).AddTicks(6232),
                            client_id = "TestClient",
                            client_secret = "TestSecret"
                        });
                });

            modelBuilder.Entity("AuthServer.NET.Models.Entities.ClientROPassword", b =>
                {
                    b.HasBaseType("AuthServer.NET.Models.Entities.Client");

                    b.ToTable("Clients");

                    b.HasDiscriminator().HasValue("ClientROPassword");
                });

            modelBuilder.Entity("AuthServer.NET.Models.Entities.Client", b =>
                {
                    b.HasOne("AuthServer.NET.Models.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Clients")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AuthServer.NET.Models.Entities.RefreshToken", b =>
                {
                    b.HasOne("AuthServer.NET.Models.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AuthServer.NET.Models.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
